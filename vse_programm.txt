git init - инициализация папки
pwd - возращает к месту твоей работы
cd - перейти на следующий уровень
cd .. - вернутся на шаг назад
cd ~ - вернуться в домашнюю папку
ls - посмотреть наполнение данной папки
ls .. - посмотреть наполнение родительской папки без перехода туда
ls ~ - посмотреть наполнение домашней папки не переходя туда
ls -all - посмотреть наполнение со скрытыми файлами
mkdir - создание нового каталога(папки)
touch - создание нового файлами
rm - удаление той или иной переменной
cp - копирование файлов
mv - перемещение файлов и папок
nano(Vim) - редактор в терминале
cat - печать содержимого текстовых файлов
&& - для написания сразу же нескольких команд
 git config --global user.name "User Namovich" 
# имя или ник нужно написать латиницей и в кавычках

$ git config --global user.email username@yandex.ru
# здесь нужно указать свой настоящий email 
$ cat ~/.gitconfig - посмотреть кто в настройках репозитория
rm -rf .git - разгитить папку
 git status - сатус репозитория
 git add --all - подготовить к сохранению все файлы в репозитории.
git add - сообщает Git, какие именно файлы нужно сохранить и какую их версию
git commit - происходит само сохранение коммита
git commit -m -  позволяет присвоить коммиту сообщение
git log - просмотр истории коммитов, q - покинуть команду
git push origin master/main - запушить изменение в Хаб
git push -u origin main - В первый раз эту команду нужно вызвать с флагом
git remote -v - позволяет посмотреть связан ли репозиторий с Хаб
git log --online - сокращённый лог
git show - позволяет посмотреть все изменения, сделанные в рамках одного коммита.
git commit --amend - исправление последнего коммита
git commit --amend --no-edit - без изменения месседжа
git restore --staged <file> - Убрать файл из staging
 git reset --hard <commit hash> - «откатить» то, что уже было закоммичено
 git restore <file> - «Откатить» изменения, которые не попали ни в staging, ни в коммит
git diff - посмотреть, что изменилось в этом коммите
echo "text" >> - дописывает новые строки
echo "text" > - заменяет старые на новую строку
git status --ignored - Если нужно отобразить и прогинорированные файлы
git clone - создаёт копию удалённого репозитория на локальном компьютере
Fork - создаст копию, но не будет синхронизировать изменения — это нужно делать самостоятельно.
git branch - Просмотреть ветки проекта
git branch <название_ветки> - создание веток
git checkout <название_ветки> - Переключиться на другую ветку
git checkout -b <название_ветки> - Создать ветку и сразу переключиться на неё
git diff <название_ветки1> <название_ветки2> - Сравнить ветки
git merge <название_ветки> - Выполнить слияние
git branch -D <название_ветки> - Удалить ветку после объединения

